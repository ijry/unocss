import{_ as e,c as a,o,ac as l}from"./chunks/framework.CXa1SYzb.js";const b=JSON.parse('{"title":"配置 UnoCSS","description":"配置使 UnoCSS 强大。","frontmatter":{"title":"配置 UnoCSS","description":"配置使 UnoCSS 强大。","outline":"deep"},"headers":[],"relativePath":"config/index.md","filePath":"config/index.md","lastUpdated":1724550119000}'),t={name:"config/index.md"},r=l('<h1 id="配置-unocss" tabindex="-1">配置 UnoCSS <a class="header-anchor" href="#配置-unocss" aria-label="Permalink to &quot;配置 UnoCSS&quot;">​</a></h1><h2 id="配置" tabindex="-1">配置 <a class="header-anchor" href="#配置" aria-label="Permalink to &quot;配置&quot;">​</a></h2><p>配置使 UnoCSS 强大。</p><ul><li><a href="/config/rules">规则</a> - 定义原子 CSS 工具类</li><li><a href="/config/shortcuts">快捷方式</a> - 将多个规则组合成一个简写。</li><li><a href="/config/theme">主题</a> - 定义主题变量。</li><li><a href="/config/variants">变体</a> - 对规则应用自定义约定。</li><li><a href="/config/extractors">提取器</a> - 定义从何处以及如何提取工具类的使用。</li><li><a href="/config/preflights">预设样式</a> - 定义全局的原始 CSS。</li><li><a href="/config/layers">层级</a> - 定义每个工具类层的顺序。</li><li><a href="/config/presets">预设</a> - 常见用例的预定义配置。</li><li><a href="/config/transformers">变换器</a> - 对用户源代码进行代码变换以支持约定。</li><li><a href="/config/autocomplete">自动补全</a> - 定义自定义的自动补全建议。</li></ul><h2 id="选项" tabindex="-1">选项 <a class="header-anchor" href="#选项" aria-label="Permalink to &quot;选项&quot;">​</a></h2><h3 id="规则" tabindex="-1">规则 <a class="header-anchor" href="#规则" aria-label="Permalink to &quot;规则&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Rule&lt;Theme&gt;[]</code></li></ul><p>用于生成 CSS 工具类的规则。后面的条目优先级更高。</p><h3 id="快捷方式" tabindex="-1">快捷方式 <a class="header-anchor" href="#快捷方式" aria-label="Permalink to &quot;快捷方式&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>UserShortcuts&lt;Theme&gt;</code></li></ul><p>类似于 Windi CSS 的快捷方式，允许通过组合现有工具类创建新工具类。后面的条目优先级更高。</p><h3 id="主题" tabindex="-1">主题 <a class="header-anchor" href="#主题" aria-label="Permalink to &quot;主题&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Theme</code></li></ul><p>规则之间共享配置的主题对象。</p><h3 id="extendtheme" tabindex="-1">extendTheme <a class="header-anchor" href="#extendtheme" aria-label="Permalink to &quot;extendTheme&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;ThemeExtender&lt;Theme&gt;&gt;</code> 自定义函数修改主题对象。</li></ul><p>也可以返回一个新的主题对象以完全替换原来的。</p><h3 id="变体" tabindex="-1">变体 <a class="header-anchor" href="#变体" aria-label="Permalink to &quot;变体&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Variant&lt;Theme&gt;[]</code></li></ul><p>预处理选择器的变体，能够重写 CSS 对象。</p><h3 id="提取器" tabindex="-1">提取器 <a class="header-anchor" href="#提取器" aria-label="Permalink to &quot;提取器&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Extractor[]</code></li></ul><p>处理源文件并输出可能的类/选择器的提取器。可以语言敏感。</p><h3 id="预设样式" tabindex="-1">预设样式 <a class="header-anchor" href="#预设样式" aria-label="Permalink to &quot;预设样式&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Preflight&lt;Theme&gt;[]</code></li></ul><p>原始 CSS 注入。</p><h3 id="层级" tabindex="-1">层级 <a class="header-anchor" href="#层级" aria-label="Permalink to &quot;层级&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Record&lt;string, number&gt;</code></li></ul><p>层级顺序。默认是 0。</p><h3 id="outputtocsslayers" tabindex="-1">outputToCssLayers <a class="header-anchor" href="#outputtocsslayers" aria-label="Permalink to &quot;outputToCssLayers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean | UseCssLayersOptions</code></li><li><strong>默认值:</strong> <code>false</code></li></ul><p>将层输出到 CSS 层叠层。</p><h4 id="csslayername" tabindex="-1">cssLayerName <a class="header-anchor" href="#csslayername" aria-label="Permalink to &quot;cssLayerName&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>(internalLayer: string) =&gt; string | undefined | null</code></li></ul><p>指定内部层应输出到的 CSS 层的名称（可以是子层，例如 &quot;mylayer.mysublayer&quot;）。</p><p>如果返回 <code>undefined</code>，将使用内部层名称作为 CSS 层名称。 如果返回 <code>null</code>，内部层不会输出到 CSS 层。</p><h3 id="sortlayers" tabindex="-1">sortLayers <a class="header-anchor" href="#sortlayers" aria-label="Permalink to &quot;sortLayers&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(layers: string[]) =&gt; string[]</code></li></ul><p>自定义函数来排序层。</p><h3 id="预设" tabindex="-1">预设 <a class="header-anchor" href="#预设" aria-label="Permalink to &quot;预设&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(PresetOrFactory&lt;Theme&gt; | PresetOrFactory&lt;Theme&gt;[])[]</code></li></ul><p>常见用例的预定义配置。</p><h3 id="变换器" tabindex="-1">变换器 <a class="header-anchor" href="#变换器" aria-label="Permalink to &quot;变换器&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>SourceCodeTransformer[]</code></li></ul><p>对源代码进行自定义变换。</p><h3 id="blocklist" tabindex="-1">blocklist <a class="header-anchor" href="#blocklist" aria-label="Permalink to &quot;blocklist&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>BlocklistRule[]</code></li></ul><p>用于排除设计系统中的选择器的规则（以缩小可能性）。结合 <code>warnExcluded</code> 选项还可以帮助您识别错误的用法。</p><h3 id="safelist" tabindex="-1">safelist <a class="header-anchor" href="#safelist" aria-label="Permalink to &quot;safelist&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>始终包含的工具类。</p><h3 id="预处理" tabindex="-1">预处理 <a class="header-anchor" href="#预处理" aria-label="Permalink to &quot;预处理&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;Preprocessor&gt;</code></li></ul><p>预处理传入的工具类，返回假值以排除。</p><h3 id="后处理" tabindex="-1">后处理 <a class="header-anchor" href="#后处理" aria-label="Permalink to &quot;后处理&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;Postprocessor&gt;</code></li></ul><p>后处理生成的工具类对象。</p><h3 id="分隔符" tabindex="-1">分隔符 <a class="header-anchor" href="#分隔符" aria-label="Permalink to &quot;分隔符&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Arrayable&lt;string&gt;</code></li><li><strong>默认值:</strong> <code>[&#39;:&#39;, &#39;-&#39;]</code></li></ul><p>变体分隔符。</p><h3 id="默认提取器" tabindex="-1">默认提取器 <a class="header-anchor" href="#默认提取器" aria-label="Permalink to &quot;默认提取器&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>Extractor | null | false</code></li><li><strong>默认值:</strong> <code>import(&#39;@unocss/core&#39;).defaultExtractor</code></li></ul><p>始终应用的默认提取器。默认情况下，它通过空格和引号拆分源代码。</p><p>它可能会被预设或用户配置替换，只能存在一个默认提取器，后面的将覆盖前面的。</p><p>传递 <code>null</code> 或 <code>false</code> 以禁用默认提取器。</p><h3 id="自动补全" tabindex="-1">自动补全 <a class="header-anchor" href="#自动补全" aria-label="Permalink to &quot;自动补全&quot;">​</a></h3><p>自动补全的其他选项。</p><h4 id="模板" tabindex="-1">模板 <a class="header-anchor" href="#模板" aria-label="Permalink to &quot;模板&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;AutoCompleteFunction | AutoCompleteTemplate&gt;</code></li></ul><p>提供自动补全建议的自定义函数/模板。</p><h4 id="提取器-1" tabindex="-1">提取器 <a class="header-anchor" href="#提取器-1" aria-label="Permalink to &quot;提取器&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;AutoCompleteExtractor&gt;</code></li></ul><p>自定义提取器以提取可能的类并将类名样式建议转换为正确的格式。</p><h4 id="简写" tabindex="-1">简写 <a class="header-anchor" href="#简写" aria-label="Permalink to &quot;简写&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Record&lt;string, string | string[]&gt;</code></li></ul><p>提供自动补全建议的自定义简写。如果值是一个数组，它将用 <code>|</code> 连接并用 <code>()</code> 包裹。</p><h3 id="内容" tabindex="-1">内容 <a class="header-anchor" href="#内容" aria-label="Permalink to &quot;内容&quot;">​</a></h3><p>用于提取工具类用法的来源选项。</p><p>支持的来源：</p><ul><li><code>filesystem</code> - 从文件系统提取</li><li><code>plain</code> - 从纯内联文本提取</li><li><code>pipeline</code> - 从构建工具的转换管道中提取，例如 Vite 和 Webpack</li></ul><p>从每个来源提取的用法将 <strong>合并</strong> 在一起。</p><h4 id="文件系统" tabindex="-1">文件系统 <a class="header-anchor" href="#文件系统" aria-label="Permalink to &quot;文件系统&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>string[]</code></li><li><strong>默认值:</strong> <code>[]</code></li></ul><p>从文件系统提取的全局模式，除了其他内容来源外。</p><p>在开发模式下，这些文件将被监视并触发 HMR。</p><h4 id="内联" tabindex="-1">内联 <a class="header-anchor" href="#内联" aria-label="Permalink to &quot;内联&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>string | { code: string; id?: string } | (() =&gt; Awaitable&lt;string | { code: string; id?: string }&gt;)) []</code></li></ul><p>要提取的内联文本。</p><h4 id="管道" tabindex="-1">管道 <a class="header-anchor" href="#管道" aria-label="Permalink to &quot;管道&quot;">​</a></h4><p>过滤器以确定是否从构建工具的转换管道中提取某些模块。</p><p>目前仅适用于 Vite 和 Webpack 集成。</p><p>设置 <code>false</code> 以禁用。</p><h5 id="包含" tabindex="-1">包含 <a class="header-anchor" href="#包含" aria-label="Permalink to &quot;包含&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>FilterPattern</code></li><li><strong>默认值:</strong> <code>[/\\.(vue|svelte|[jt]sx|mdx?|astro|elm|php|phtml|html)($|\\?)/]</code></li></ul><p>过滤被提取文件的模式。支持正则表达式和 <code>picomatch</code> 全局模式。</p><p>默认情况下，不提取 <code>.ts</code> 和 <code>.js</code> 文件。</p><h5 id="排除" tabindex="-1">排除 <a class="header-anchor" href="#排除" aria-label="Permalink to &quot;排除&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>FilterPattern</code></li><li><strong>默认值:</strong> <code>[/\\.(css|postcss|sass|scss|less|stylus|styl)($|\\?)/]</code></li></ul><p>过滤不被提取文件的模式。支持正则表达式和 <code>picomatch</code> 全局模式。</p><p>默认情况下，还提取 <code>node_modules</code> 和 <code>dist</code>。</p><h3 id="configresolved" tabindex="-1">configResolved <a class="header-anchor" href="#configresolved" aria-label="Permalink to &quot;configResolved&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>(config: ResolvedConfig) =&gt; void</code></li></ul><p>修改解析后的配置的钩子。</p><p>首先运行预设，然后是用户配置。</p><h3 id="配置文件" tabindex="-1">配置文件 <a class="header-anchor" href="#配置文件" aria-label="Permalink to &quot;配置文件&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string | false</code></li></ul><p>从配置文件加载。</p><p>设置 <code>false</code> 以禁用。</p><h3 id="配置依赖" tabindex="-1">配置依赖 <a class="header-anchor" href="#配置依赖" aria-label="Permalink to &quot;配置依赖&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>触发配置重新加载的文件列表。</p><h3 id="cli" tabindex="-1">CLI <a class="header-anchor" href="#cli" aria-label="Permalink to &quot;CLI&quot;">​</a></h3><p>UnoCSS CLI 选项。</p><h4 id="入口" tabindex="-1">入口 <a class="header-anchor" href="#入口" aria-label="Permalink to &quot;入口&quot;">​</a></h4><ul><li><strong>类型:</strong> <code>Arrayable&lt;CliEntryItem&gt;</code></li></ul><p>UnoCSS CLI 入口点。</p><h5 id="模式" tabindex="-1">模式 <a class="header-anchor" href="#模式" aria-label="Permalink to &quot;模式&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>string[]</code></li></ul><p>从文件系统提取的全局模式。</p><h5 id="输出文件" tabindex="-1">输出文件 <a class="header-anchor" href="#输出文件" aria-label="Permalink to &quot;输出文件&quot;">​</a></h5><ul><li><strong>类型:</strong> <code>string</code></li></ul><p>输出文件路径。</p><h3 id="shortcutslayer" tabindex="-1">shortcutsLayer <a class="header-anchor" href="#shortcutslayer" aria-label="Permalink to &quot;shortcutsLayer&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>string</code></li><li><strong>默认值:</strong> <code>&#39;shortcuts&#39;</code></li></ul><p>快捷方式的布局名称。</p><h3 id="环境模式" tabindex="-1">环境模式 <a class="header-anchor" href="#环境模式" aria-label="Permalink to &quot;环境模式&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>&#39;dev&#39; | &#39;build&#39;</code></li><li><strong>默认值:</strong> <code>&#39;build&#39;</code></li></ul><p>环境模式。</p><h3 id="细节" tabindex="-1">细节 <a class="header-anchor" href="#细节" aria-label="Permalink to &quot;细节&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean</code></li></ul><p>暴露内部细节以进行调试/检查。</p><h3 id="警告" tabindex="-1">警告 <a class="header-anchor" href="#警告" aria-label="Permalink to &quot;警告&quot;">​</a></h3><ul><li><strong>类型:</strong> <code>boolean</code></li><li><strong>默认值:</strong> <code>true</code></li></ul><p>在 blocklist 中存在匹配选择器时发出警告。</p>',134),i=[r];function s(n,d,c,h,u,g){return o(),a("div",null,i)}const f=e(t,[["render",s]]);export{b as __pageData,f as default};
